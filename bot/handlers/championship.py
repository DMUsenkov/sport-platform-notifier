from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from utils.logger import get_logger
from database.repositories.user_repository import UserRepository
from api.client import ApiClient
from bot.keyboards.keyboards import get_championship_menu_keyboard, get_start_keyboard

logger = get_logger("championship_handler")

api_client = None


def register_championship_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä Aiogram
    """
    global api_client
    api_client = ApiClient()

    @dp.message_handler(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã")
    async def recommended_championships(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            wait_message = await message.answer("–ò—â–µ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å...")

            user_id = user.id if hasattr(user, 'id') else user['id'] if isinstance(user,
                                                                                   dict) and 'id' in user else None

            if user_id is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            championships = await api_client.get_recommended_championships(user_id)

            if championships is None or not isinstance(championships, list) or len(championships) == 0:
                await message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )
                return

            valid_championships = [c for c in championships if isinstance(c, dict) and c.get('name')]
            if not valid_championships:
                await message.answer(
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )
                return

            await message.answer(
                "üèÜ –í–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:",
                reply_markup=get_start_keyboard()
            )

            def escape_markdown(text):
                if not text:
                    return ""
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.',
                                 '!']
                for char in special_chars:
                    text = text.replace(char, '\\' + char)
                return text

            count_sent = 0
            for championship in valid_championships:
                try:
                    name = escape_markdown(championship.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                    sport = escape_markdown(championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                    city = escape_markdown(championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                    team_size = championship.get('team_members_count', '-')
                    deadline = escape_markdown(championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω'))

                    description = championship.get('description', '')
                    if len(description) > 200:
                        description = description[:197] + "..."
                    description = escape_markdown(description)

                    response = f"üèÜ <b>{name}</b>\n\n"
                    response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
                    response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                    response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                    response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}\n\n"

                    if description:
                        response += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"

                    tournament_id = championship.get('tournament_id', championship.get('id'))
                    if tournament_id:
                        response += f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /championship_{tournament_id}"

                    await message.answer(response, parse_mode="HTML")
                    count_sent += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {e}")

                    try:
                        name = championship.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        sport = championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        city = championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        team_size = championship.get('team_members_count', '-')
                        deadline = championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')

                        plain_response = f"üèÜ {name}\n\n"
                        plain_response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
                        plain_response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                        plain_response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        plain_response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}\n"

                        tournament_id = championship.get('tournament_id', championship.get('id'))
                        if tournament_id:
                            plain_response += f"\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /championship_{tournament_id}"

                        await message.answer(plain_response)
                        count_sent += 1
                    except Exception as e2:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

            if count_sent == 0:
                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_start_keyboard()
                )

        except Exception as e:
            user_id_for_log = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                if hasattr(user, 'id'):
                    user_id_for_log = user.id
                elif isinstance(user, dict) and 'id' in user:
                    user_id_for_log = user['id']
            except:
                pass

            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_for_log}: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_start_keyboard()
            )

    @dp.message_handler(lambda message: message.text.startswith('/championship_'))
    async def championship_details(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            wait_message = await message.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ...")

            try:
                championship_id = int(message.text.split('_')[1])
            except (IndexError, ValueError) as e:
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /championship_<id>, –Ω–∞–ø—Ä–∏–º–µ—Ä /championship_123")
                return

            user_id = user.id if hasattr(user, 'id') else user['id'] if isinstance(user,
                                                                                   dict) and 'id' in user else None

            if user_id is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            championship = await api_client.get_championship_details(championship_id)

            if isinstance(championship, dict) and "error" in championship:
                error_msg = championship["error"]

                if "404" in error_msg or "not found" in error_msg.lower():
                    await message.answer(
                        f"‚ùå –ß–µ–º–ø–∏–æ–Ω–∞—Ç —Å ID {championship_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ?\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                        reply_markup=get_start_keyboard()
                    )
                elif "403" in error_msg or "access" in error_msg.lower():
                    await message.answer(
                        f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ —Å ID {championship_id}.\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç —á–µ–º–ø–∏–æ–Ω–∞—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                        reply_markup=get_start_keyboard()
                    )
                elif "401" in error_msg:
                    await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
                else:
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {error_msg}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=get_start_keyboard()
                    )
                return

            if not championship or not isinstance(championship, dict):
                await message.answer(
                    f"‚ùå –ß–µ–º–ø–∏–æ–Ω–∞—Ç —Å ID {championship_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_start_keyboard()
                )
                return

            name = championship.get('name', f'–ß–µ–º–ø–∏–æ–Ω–∞—Ç #{championship_id}')
            sport = championship.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
            city = championship.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
            team_members_count = championship.get('team_members_count', '-')
            application_deadline = championship.get('application_deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
            description = championship.get('description', '')
            org_name = championship.get('org_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            is_stopped = championship.get('is_stopped', False)


            response = f"üèÜ <b>{name}</b>\n\n"
            response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
            response += f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
            response += f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            response += f"üìÖ –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {application_deadline}\n\n"

            if 'stages' in championship and championship['stages']:
                response += f"üìä <b>–≠—Ç–∞–ø—ã —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞:</b>\n"
                for stage in championship['stages']:
                    status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if stage.get('is_published') else "‚è≥ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
                    response += f"- {stage.get('name', '–≠—Ç–∞–ø')}: {status}\n"
                response += "\n"

            if description:
                if len(description) > 500:
                    description = description[:497] + "..."
                response += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"

            response += f"üëî –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {org_name}\n"

            if is_stopped:
                response += "‚ö†Ô∏è –ß–µ–º–ø–∏–æ–Ω–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

            await message.answer(response, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_start_keyboard()
            )