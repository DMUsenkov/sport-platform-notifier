import logging
import re
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from utils.logger import get_logger
from database.repositories.user_repository import UserRepository
from api.client import ApiClient
from bot.messages.templates import (
    WELCOME_MESSAGE,
    PHONE_LINKED_MESSAGE,
    PHONE_NOT_FOUND_MESSAGE,
    PHONE_LINK_ERROR_MESSAGE,
    INVALID_PHONE_FORMAT_MESSAGE
)
from bot.keyboards.keyboards import (
    get_phone_keyboard,
    get_start_keyboard,
    get_help_keyboard,
    get_match_actions_keyboard
)

logger = get_logger("user_handler")


class UserStates(StatesGroup):
    waiting_for_phone = State()


PHONE_REGEX = r'^(\+7|7|8)[0-9]{10}$'

api_client = None


def register_user_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä Aiogram
    """
    global api_client
    api_client = ApiClient()

    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id

        user_data = UserRepository.get_by_telegram_id(str(user_id))

        if user_data:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {user_data['first_name']}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É.",
                reply_markup=get_start_keyboard()
            )
        else:
            await message.answer(
                WELCOME_MESSAGE,
                reply_markup=get_phone_keyboard()
            )
            await UserStates.waiting_for_phone.set()

    @dp.message_handler(content_types=types.ContentType.CONTACT, state=UserStates.waiting_for_phone)
    async def process_contact(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        """
        phone_number = message.contact.phone_number

        if phone_number.startswith('+'):
            phone_number = phone_number[1:]

        await process_phone_number(message, phone_number, state)

    @dp.message_handler(state=UserStates.waiting_for_phone)
    async def process_phone_text(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        """
        phone_number = message.text.strip()

        if not re.match(PHONE_REGEX, phone_number):
            await message.answer(INVALID_PHONE_FORMAT_MESSAGE)
            return

        if phone_number.startswith('+'):
            phone_number = phone_number[1:]
        elif phone_number.startswith('8'):
            phone_number = '7' + phone_number[1:]

        await process_phone_number(message, phone_number, state)

    @dp.message_handler(commands=['help'])
    @dp.message_handler(lambda message: message.text == "–ü–æ–º–æ—â—å")
    async def cmd_help(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
            reply_markup=get_help_keyboard()
        )

    @dp.message_handler(lambda message: message.text == "–ú–æ–∏ –º–∞—Ç—á–∏")
    async def my_matches(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            user_id = user.id if hasattr(user, 'id') else user.get('id')

            if not user_id:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start."
                )
                return

            matches = await api_client.get_user_matches(user_id, status="upcoming")

            if not matches:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π.")
                return

            response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏:\n\n"

            for match in matches:
                response += f"üèÜ *{match['tournament_name']}*\n"
                response += f"üÜö –°–æ–ø–µ—Ä–Ω–∏–∫: {match['opponent_name']}\n"
                response += f"üìç –ú–µ—Å—Ç–æ: {match['location_name']}\n"
                response += f"üìÜ –î–∞—Ç–∞: {match['date']} –≤ {match['time']}\n\n"

            await message.answer(response, parse_mode="Markdown")

        except Exception as e:
            user_id_str = str(user.id if hasattr(user, 'id') else user.get('id', 'unknown'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")

            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @dp.message_handler(commands=['invitations'])
    @dp.message_handler(lambda message: message.text == "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    async def my_invitations(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            user_id = user.id if hasattr(user, 'id') else user.get('id')

            if not user_id:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start."
                )
                return

            invitations = await api_client.get_user_invitations(user_id)

            if not invitations:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
                return

            has_sent_invitations = False

            for invitation in invitations:
                if invitation['type'] == 'team':
                    markup = get_invitation_keyboard(invitation['invitation_id'], "team")

                    await message.answer(
                        TEAM_INVITATION_MESSAGE.format(
                            team_name=invitation.get('team_name', ''),
                            sport_type=invitation.get('sport', ''),
                            captain_name=invitation.get('inviter_name', '')
                        ),
                        reply_markup=markup
                    )
                    has_sent_invitations = True

                elif invitation['type'] == 'committee':
                    markup = get_invitation_keyboard(invitation['invitation_id'], "committee")

                    await message.answer(
                        COMMITTEE_INVITATION_MESSAGE.format(
                            committee_name=invitation.get('committee_name', ''),
                            inviter_name=invitation.get('inviter_name', '')
                        ),
                        reply_markup=markup
                    )
                    has_sent_invitations = True

            if not has_sent_invitations:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")

        except Exception as e:
            user_id_str = str(user.id if hasattr(user, 'id') else user.get('id', 'unknown'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")

            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @dp.message_handler(lambda message: message.text == "–ú–æ–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã")
    async def my_championships(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            user_id = user.id if hasattr(user, 'id') else user.get('id')

            if not user_id:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start."
                )
                return

            championships = await api_client.get_user_championships(user_id)

            if not championships:
                await message.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ.")
                return

            response = "üèÜ –í–∞—à–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã:\n\n"

            for championship in championships:
                response += f"*{championship['name']}*\n"
                response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {championship['sport']}\n"
                response += f"üåÜ –ì–æ—Ä–æ–¥: {championship['city']}\n"

                if championship['status'] == "active":
                    status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
                elif championship['status'] == "past":
                    status = "–ó–∞–≤–µ—Ä—à–µ–Ω"
                else:
                    status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                response += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

                if 'position' in championship and championship['position']:
                    response += f"üèÖ –ü–æ–∑–∏—Ü–∏—è: {championship['position']}\n"

                response += "\n"

            await message.answer(response, parse_mode="Markdown")

        except Exception as e:
            user_id_str = str(user.id if hasattr(user, 'id') else user.get('id', 'unknown'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")

            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @dp.message_handler(lambda message: message.text == "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã")
    async def my_teams(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            user_id = user.id if hasattr(user, 'id') else user.get('id')

            if not user_id:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start."
                )
                return

            teams = await api_client.get_user_teams(user_id)

            if not teams:
                await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return

            response = "üë• –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"

            for team in teams:
                response += f"*{team['name']}*\n"
                response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {team['sport']}\n"

                if team.get('is_captain', False):
                    response += "üëë –í—ã –∫–∞–ø–∏—Ç–∞–Ω —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã\n"

                response += "\n"

            response += "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /team_<id>, –Ω–∞–ø—Ä–∏–º–µ—Ä /team_123"

            await message.answer(response, parse_mode="Markdown")

        except Exception as e:
            user_id_str = str(user.id if hasattr(user, 'id') else user.get('id', 'unknown'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")

            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @dp.callback_query_handler(lambda c: c.data == 'help_about')
    async def help_about(callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ

        Args:
            callback_query: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "–û –±–æ—Ç–µ:\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã "
            "–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏.\n\n"
            "–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö, "
            "–º–∞—Ç—á–∞—Ö –∏ –∫–æ–º–∞–Ω–¥–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ."
        )

    @dp.callback_query_handler(lambda c: c.data == 'help_notification_types')
    async def help_notification_types(callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        Args:
            callback_query: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            "‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö\n"
            "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤\n"
            "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π\n"
            "‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –º–∞—Ç—á–µ–π\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø–ª–µ–π-–æ—Ñ—Ñ\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö\n"
            "‚Ä¢ –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç—ã"
        )

    @dp.callback_query_handler(lambda c: c.data == 'help_change_phone')
    async def help_change_phone(callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            callback_query: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /changephone\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç\n"
            "3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
        )

    @dp.callback_query_handler(lambda c: c.data == 'help_support')
    async def help_support(callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

        Args:
            callback_query: –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:\n"
            "support@sports-platform.ru\n\n"
            "–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "+7 (800) 123-45-67"
        )

    @dp.message_handler(commands=['changephone'])
    async def cmd_change_phone(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /changephone

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_phone_keyboard()
        )
        await UserStates.waiting_for_phone.set()

    async def process_phone_number(message: types.Message, phone_number: str, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        """
        try:
            user = UserRepository.get_by_phone(phone_number)

            if user:
                first_name = user.first_name if hasattr(user, 'first_name') else user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                last_name = user.last_name if hasattr(user, 'last_name') else user.get('last_name', '')

                success = UserRepository.update_telegram_id(phone_number, str(message.from_user.id))
                if success:
                    await message.answer(
                        PHONE_LINKED_MESSAGE.format(
                            first_name=first_name,
                            last_name=last_name
                        ),
                        reply_markup=get_start_keyboard()
                    )
                    await state.finish()
                else:
                    await message.answer(
                        PHONE_LINK_ERROR_MESSAGE,
                        reply_markup=get_phone_keyboard()
                    )
                return

            if api_client:
                user_data = await api_client.get_user_data(phone_number)
                if "error" not in user_data and user_data:
                    user = UserRepository.create(
                        phone_number=phone_number,
                        first_name=user_data.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                        last_name=user_data.get("last_name", ""),
                        telegram_id=str(message.from_user.id)
                    )

                    if user:
                        first_name = user.first_name if hasattr(user, 'first_name') else user.get('first_name',
                                                                                                  '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        last_name = user.last_name if hasattr(user, 'last_name') else user.get('last_name', '')

                        await message.answer(
                            PHONE_LINKED_MESSAGE.format(
                                first_name=first_name,
                                last_name=last_name
                            ),
                            reply_markup=get_start_keyboard()
                        )
                        await state.finish()
                    else:
                        await message.answer(
                            PHONE_LINK_ERROR_MESSAGE,
                            reply_markup=get_phone_keyboard()
                        )
                    return

            await message.answer(
                PHONE_NOT_FOUND_MESSAGE.format(phone=phone_number),
                reply_markup=get_phone_keyboard()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}: {e}")
            await message.answer(
                PHONE_LINK_ERROR_MESSAGE,
                reply_markup=get_phone_keyboard()
            )

    @dp.message_handler(lambda message: message.text.startswith('/team_'))
    async def team_details(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = UserRepository.get_by_telegram_id(str(message.from_user.id))
        if not user:
            await message.answer(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return

        try:
            team_id = int(message.text.split('_')[1])

            team = await api_client.get_team_details(team_id)

            if not team:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π.")
                return

            response = f"üë• *{team['name']}*\n\n"
            response += f"‚öΩ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {team['sport']}\n"
            response += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team['count_member']}\n"
            response += f"üèÜ –ü–æ–±–µ–¥: {team.get('wins', 0)}\n"
            response += f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {team.get('loss', 0)}\n\n"

            response += "üë• *–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:*\n"
            for member in team.get('members', []):
                name = f"{member['first_name']} {member['last_name']}"
                if member.get('is_captain', False):
                    name += " üëë"
                response += f"- {name}\n"

            await message.answer(response, parse_mode="Markdown")

        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team_<id>, –Ω–∞–ø—Ä–∏–º–µ—Ä /team_123")
        except Exception as e:
            user_id_str = str(user.id if hasattr(user, 'id') else user.get('id', 'unknown'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")

            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )